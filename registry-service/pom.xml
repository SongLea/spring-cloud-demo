<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>spring-cloud-demo</artifactId>
        <groupId>com.songlea.demo.cloud</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>registry-center-service</artifactId>
    <description>Spring Cloud Demo：服务注册中心</description>

    <dependencies>
        <!--
        Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，
        主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。
        Spring Cloud将它集成在其子项目spring-cloud-netflix中，以实现Spring Cloud的服务发现功能。
        Eureka Server：提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，
            这样Eureka Server中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。
        Eureka Client：是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、
            使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。
            如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个
            服务节点移除（默认90秒）。Eureka Server之间将会通过复制的方式完成数据的同步。Eureka还提供了客户端缓存的机制，
            即使所有的Eureka Server都挂掉了，客户端依然可以利用缓存中的信息消费其它服务的API。
            综上，Eureka通过心跳检测、健康检查、客户端缓存等机制，确保了系统的高可用性、灵活性和可伸缩性。
        -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>

        <!--Spring Security-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
    </dependencies>

</project>